/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package captchaproj;

import java.awt.MouseInfo;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author lokesaheb
 */
public class ClickTextOptionForm extends javax.swing.JFrame {

    /**
     * Creates new form ClickTextOptionForm
     */
    static String passStr="";
    public ClickTextOptionForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtusrname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtpasswd = new javax.swing.JPasswordField();
        txtcnfpasswd = new javax.swing.JPasswordField();
        btnnwusr = new javax.swing.JButton();
        btnrst = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtuser = new javax.swing.JTextField();
        cnv = new java.awt.Canvas();
        btnredx = new javax.swing.JButton();
        btnsopass = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Click Text ");

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        jLabel3.setText("Confirm Password");

        txtcnfpasswd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtcnfpasswdFocusLost(evt);
            }
        });

        btnnwusr.setText("Register User");
        btnnwusr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnwusrActionPerformed(evt);
            }
        });

        btnrst.setText("Reset");
        btnrst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrstActionPerformed(evt);
            }
        });

        jLabel4.setText("Note: Strictly use alphabets only for passwords");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(47, 47, 47))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnnwusr)
                                .addGap(28, 28, 28)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnrst, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtusrname)
                                .addComponent(txtpasswd)
                                .addComponent(txtcnfpasswd, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtusrname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtpasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtcnfpasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnnwusr)
                    .addComponent(btnrst))
                .addGap(168, 168, 168)
                .addComponent(jLabel4)
                .addContainerGap(325, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Register", jPanel1);

        jLabel5.setText("Username");

        cnv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cnvMouseClicked(evt);
            }
        });

        btnredx.setText("Show Alphabets");
        btnredx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnredxActionPerformed(evt);
            }
        });

        btnsopass.setText("Login");
        btnsopass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsopassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(btnredx))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cnv, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(btnsopass)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnredx)
                .addGap(5, 5, 5)
                .addComponent(cnv, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btnsopass)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnnwusrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnwusrActionPerformed
        char []strpe=txtpasswd.getPassword();
        String strp=String.copyValueOf(strpe);
        String strps=strp.toUpperCase();
        String usr=txtusrname.getText();
        try {
            // TODO add your handling code here:
            String JDBC_DRIVER = "com.mysql.jdbc.Driver";
            String DB_URL = "jdbc:mysql://localhost:3306/captchdb";
            
            //  Database credentials
            String USER = "root";
            String PASS = "";
            
            Connection conn = null;
            PreparedStatement stmt = null;
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.prepareStatement("INSERT INTO cltusertbl(userid,passwd) VALUES(?,?)");
            stmt.setString(1,usr);
            stmt.setString(2,strps);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "New User Added");
            txtusrname.setText("");
            txtpasswd.setText("");
            txtcnfpasswd.setText("");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClickTextOptionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClickTextOptionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnnwusrActionPerformed

    private void btnrstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrstActionPerformed
        // TODO add your handling code here:
        txtusrname.setText("");
        txtpasswd.setText("");
        txtcnfpasswd.setText("");
        
    }//GEN-LAST:event_btnrstActionPerformed

    private void btnredxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnredxActionPerformed
        // TODO add your handling code here:
        BufferedImage imga = null;
        BufferedImage imgb = null;
        BufferedImage imgc = null;
        BufferedImage imgd = null;
        BufferedImage imge = null;
        BufferedImage imgf = null;
        BufferedImage imgg = null;
        BufferedImage imgh = null;
        BufferedImage imgi = null;
        BufferedImage imgj = null;
        BufferedImage imgk = null;
        BufferedImage imgl = null;
        BufferedImage imgm = null;
        BufferedImage imgn = null;
        BufferedImage imgo = null;
        BufferedImage imgp = null;
        BufferedImage imgq = null;
        BufferedImage imgr = null;
        BufferedImage imgs = null;
        BufferedImage imgt = null;
        BufferedImage imgu = null;
        BufferedImage imgv = null;
        BufferedImage imgw = null;
        BufferedImage imgx = null;
        BufferedImage imgy = null;
        BufferedImage imgz = null;
        
try {
    imga = ImageIO.read(getClass().getResource("/alphas/a.png"));
    imgb = ImageIO.read(getClass().getResource("/alphas/b.png"));
    imgc = ImageIO.read(getClass().getResource("/alphas/c.png"));
    imgd = ImageIO.read(getClass().getResource("/alphas/d.png"));
    imge = ImageIO.read(getClass().getResource("/alphas/e.png"));
    imgf = ImageIO.read(getClass().getResource("/alphas/f.png"));
    imgg = ImageIO.read(getClass().getResource("/alphas/g.png"));
    imgh = ImageIO.read(getClass().getResource("/alphas/h.png"));
    imgi = ImageIO.read(getClass().getResource("/alphas/i.png"));
    imgj = ImageIO.read(getClass().getResource("/alphas/j.png"));
    imgk = ImageIO.read(getClass().getResource("/alphas/k.png"));
    imgl = ImageIO.read(getClass().getResource("/alphas/l.png"));
    imgm = ImageIO.read(getClass().getResource("/alphas/m.png"));
    imgn = ImageIO.read(getClass().getResource("/alphas/n.png"));
    imgo = ImageIO.read(getClass().getResource("/alphas/o.png"));
    imgp = ImageIO.read(getClass().getResource("/alphas/p.png"));
    imgq = ImageIO.read(getClass().getResource("/alphas/q.png"));
    imgr = ImageIO.read(getClass().getResource("/alphas/r.png"));
    imgs = ImageIO.read(getClass().getResource("/alphas/s.png"));
    imgt = ImageIO.read(getClass().getResource("/alphas/t.png"));
    imgu = ImageIO.read(getClass().getResource("/alphas/u.png"));
    imgv = ImageIO.read(getClass().getResource("/alphas/v.png"));
    imgw = ImageIO.read(getClass().getResource("/alphas/w.png"));
    imgx = ImageIO.read(getClass().getResource("/alphas/x.png"));
    imgy = ImageIO.read(getClass().getResource("/alphas/y.png"));
    imgz = ImageIO.read(getClass().getResource("/alphas/z.png"));

    
} catch (IOException e) {
    System.out.println(e.getMessage());
}
        cnv.getGraphics().drawImage(imga, 10,10, null);
int drawLocationX = 100;
int drawLocationY = 10;

// Rotation information

double rotationRequired = Math.toRadians (90);
double locationX = imgb.getWidth() / 2;
double locationY = imgb.getHeight() / 2;
AffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgb, null), drawLocationX, drawLocationY, null);

drawLocationX = 200;
drawLocationY = 10;

// Rotation information

 rotationRequired = Math.toRadians (20);
 locationX = imgc.getWidth() / 2;
 locationY = imgc.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgc, null), drawLocationX, drawLocationY, null);


drawLocationX = 300;
drawLocationY = 10;

// Rotation information

 rotationRequired = Math.toRadians (-60);
 locationX = imgd.getWidth() / 2;
 locationY = imgd.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgd, null), drawLocationX, drawLocationY, null);



drawLocationX = 400;
drawLocationY = 10;

// Rotation information

 rotationRequired = Math.toRadians (120);
 locationX = imge.getWidth() / 2;
 locationY = imge.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imge, null), drawLocationX, drawLocationY, null);


drawLocationX = 10;
drawLocationY = 90;

// Rotation information

 rotationRequired = Math.toRadians (50);
 locationX = imgf.getWidth() / 2;
 locationY = imgf.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgf, null), drawLocationX, drawLocationY, null);


drawLocationX = 100;
drawLocationY = 90;

// Rotation information

 rotationRequired = Math.toRadians (-20);
 locationX = imgg.getWidth() / 2;
 locationY = imgg.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgg, null), drawLocationX, drawLocationY, null);


drawLocationX = 200;
drawLocationY = 90;

// Rotation information

 rotationRequired = Math.toRadians (-40);
 locationX = imgh.getWidth() / 2;
 locationY = imgh.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgh, null), drawLocationX, drawLocationY, null);



drawLocationX = 300;
drawLocationY = 90;

// Rotation information

 rotationRequired = Math.toRadians (-10);
 locationX = imgi.getWidth() / 2;
 locationY = imgi.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgi, null), drawLocationX, drawLocationY, null);



drawLocationX = 400;
drawLocationY = 90;

// Rotation information

 rotationRequired = Math.toRadians (40);
 locationX = imgj.getWidth() / 2;
 locationY = imgj.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgj, null), drawLocationX, drawLocationY, null);



drawLocationX = 10;
drawLocationY = 180;

// Rotation information

 rotationRequired = Math.toRadians (40);
 locationX = imgk.getWidth() / 2;
 locationY = imgk.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgk, null), drawLocationX, drawLocationY, null);



drawLocationX = 100;
drawLocationY = 180;

// Rotation information

 rotationRequired = Math.toRadians (-70);
 locationX = imgl.getWidth() / 2;
 locationY = imgl.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgl, null), drawLocationX, drawLocationY, null);



drawLocationX = 200;
drawLocationY = 180;

// Rotation information

 rotationRequired = Math.toRadians (40);
 locationX = imgm.getWidth() / 2;
 locationY = imgm.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgm, null), drawLocationX, drawLocationY, null);


drawLocationX = 300;
drawLocationY = 180;

// Rotation information

 rotationRequired = Math.toRadians (20);
 locationX = imgn.getWidth() / 2;
 locationY = imgn.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgn, null), drawLocationX, drawLocationY, null);


drawLocationX = 400;
drawLocationY = 180;

// Rotation information

 rotationRequired = Math.toRadians (5);
 locationX = imgo.getWidth() / 2;
 locationY = imgo.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgo, null), drawLocationX, drawLocationY, null);



drawLocationX = 10;
drawLocationY = 270;

// Rotation information

 rotationRequired = Math.toRadians (35);
 locationX = imgp.getWidth() / 2;
 locationY = imgp.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgp, null), drawLocationX, drawLocationY, null);



drawLocationX = 100;
drawLocationY = 270;

// Rotation information

 rotationRequired = Math.toRadians (65);
 locationX = imgq.getWidth() / 2;
 locationY = imgq.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgq, null), drawLocationX, drawLocationY, null);


drawLocationX = 200;
drawLocationY = 270;

// Rotation information

 rotationRequired = Math.toRadians (-15);
 locationX = imgr.getWidth() / 2;
 locationY = imgr.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgr, null), drawLocationX, drawLocationY, null);


drawLocationX = 300;
drawLocationY = 270;

// Rotation information

 rotationRequired = Math.toRadians (35);
 locationX = imgs.getWidth() / 2;
 locationY = imgs.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgs, null), drawLocationX, drawLocationY, null);




drawLocationX = 400;
drawLocationY = 270;

// Rotation information

 rotationRequired = Math.toRadians (45);
 locationX = imgt.getWidth() / 2;
 locationY = imgt.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgt, null), drawLocationX, drawLocationY, null);



drawLocationX = 10;
drawLocationY = 360;

// Rotation information

 rotationRequired = Math.toRadians (2);
 locationX = imgu.getWidth() / 2;
 locationY = imgu.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgu, null), drawLocationX, drawLocationY, null);



drawLocationX = 100;
drawLocationY = 360;

// Rotation information

 rotationRequired = Math.toRadians (-65);
 locationX = imgv.getWidth() / 2;
 locationY = imgv.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgv, null), drawLocationX, drawLocationY, null);


drawLocationX = 200;
drawLocationY = 360;

// Rotation information

 rotationRequired = Math.toRadians (-25);
 locationX = imgw.getWidth() / 2;
 locationY = imgw.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgw, null), drawLocationX, drawLocationY, null);



drawLocationX = 300;
drawLocationY = 360;

// Rotation information

 rotationRequired = Math.toRadians (-25);
 locationX = imgx.getWidth() / 2;
 locationY = imgx.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgx, null), drawLocationX, drawLocationY, null);


drawLocationX = 400;
drawLocationY = 360;

// Rotation information

 rotationRequired = Math.toRadians (-25);
 locationX = imgy.getWidth() / 2;
 locationY = imgy.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgy, null), drawLocationX, drawLocationY, null);



drawLocationX = 200;
drawLocationY = 450;

// Rotation information

 rotationRequired = Math.toRadians (-15);
 locationX = imgz.getWidth() / 2;
 locationY = imgz.getHeight() / 2;
tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// Drawing the rotated image at the required drawing locations
cnv.getGraphics().drawImage(op.filter(imgz, null), drawLocationX, drawLocationY, null);
    }//GEN-LAST:event_btnredxActionPerformed

    private void cnvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cnvMouseClicked
        // TODO add your handling code here:
        //int x=evt.getX();
        //int y=evt.getY();
        
        int x=MouseInfo.getPointerInfo().getLocation().x-cnv.getLocationOnScreen().x;
        int y=MouseInfo.getPointerInfo().getLocation().y-cnv.getLocationOnScreen().y;
        System.out.println(x+","+y);
        if(x>=10 && x<100 && y>=10 && y<90) {
         passStr=passStr+"A";
        }
        if(x>=100 && x<200 && y>=10 && y<90) {
         passStr=passStr+"B";
        }
        if(x>=200 && x<300 && y>=10 && y<90) {
         passStr=passStr+"C";
        }
        if(x>=300 && x<400 && y>=10 && y<90) {
        passStr=passStr+"D";
        }
        if(x>=400 && x<500 && y>=10 && y<90) {
       passStr=passStr+"E";
        }
        
        
        if(x>=10 && x<100 && y>=90 && y<180) {
        passStr=passStr+"F";
        }
        if(x>=100 && x<200 && y>=90 && y<180) {
        passStr=passStr+"G";
        }
        if(x>=200 && x<300 && y>=90 && y<180) {
        passStr=passStr+"H";
        }
        if(x>=300 && x<400 && y>=90 && y<180) {
        passStr=passStr+"I";
        }
        if(x>=400 && x<500 && y>=90 && y<180) {
        passStr=passStr+"J";
        } 
           
        
        if(x>=10 && x<100 && y>=180 && y<270) {
        passStr=passStr+"K";
        }
        if(x>=100 && x<200 && y>=180 && y<270) {
        passStr=passStr+"L";
        }
        if(x>=200 && x<300 && y>=180 && y<270) {
        passStr=passStr+"M";
        }
        if(x>=300 && x<400 && y>=180 && y<270) {
        passStr=passStr+"N";
        }
        if(x>=400 && x<500 && y>=180 && y<270) {
        passStr=passStr+"O";
        }
        
        
        if(x>=10 && x<100 && y>=270 && y<360) {
        passStr=passStr+"P";
        }
        if(x>=100 && x<200 && y>=270 && y<360) {
        passStr=passStr+"Q";
        }
        if(x>=200 && x<300 && y>=270 && y<360) {
        passStr=passStr+"R";
        }
        if(x>=300 && x<400 && y>=270 && y<360) {
        passStr=passStr+"S";
        }
        if(x>=400 && x<500 && y>=270 && y<360) {
        passStr=passStr+"T";
        }
        
        
        if(x>=10 && x<100 && y>=360 && y<450) {
        passStr=passStr+"U";
        }
        if(x>=100 && x<200 && y>=360 && y<450) {
        passStr=passStr+"V";
        }
        if(x>=200 && x<300 && y>=360 && y<450) {
        passStr=passStr+"W";
        }
        if(x>=300 && x<400 && y>=360 && y<450) {
        passStr=passStr+"X";
        }
        if(x>=400 && x<500 && y>=360 && y<450) {
        passStr=passStr+"Y";
        }
        
        
        if(x>=200 && x<300 && y>=450 && y<540) {
        passStr=passStr+"Z";
        }
        
    
    }//GEN-LAST:event_cnvMouseClicked

    private void btnsopassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsopassActionPerformed
        // TODO add your handling code here:
        String trx=txtuser.getText();
        String unpr="";
try {
            // TODO add your handling code here:
            String JDBC_DRIVER = "com.mysql.jdbc.Driver";
            String DB_URL = "jdbc:mysql://localhost:3306/captchdb";
            
            //  Database credentials
            String USER = "root";
            String PASS = "";
            
            Connection conn = null;
            PreparedStatement stmt = null;
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.prepareStatement("select * from cltusertbl WHERE userid=?");
            stmt.setString(1,trx);
            ResultSet rs=stmt.executeQuery();
            while(rs.next()) {
             unpr=rs.getString("passwd");
            }
            if(unpr.equals(passStr)) {
             JOptionPane.showMessageDialog(null, "Login Successful.");
             passStr="";
            }else
            {
             JOptionPane.showMessageDialog(null, "Login Failed.");
             passStr="";
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClickTextOptionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClickTextOptionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        JOptionPane.showMessageDialog(null, passStr);
    }//GEN-LAST:event_btnsopassActionPerformed

    private void txtcnfpasswdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcnfpasswdFocusLost
        // TODO add your handling code here:
        char []strpe=txtpasswd.getPassword();
        char []strce=txtcnfpasswd.getPassword();
        String strp=String.copyValueOf(strpe);
        String strc=String.copyValueOf(strce);
        System.out.println(strp);
        System.out.println(strc);
        if(!strp.equals(strc)) {
        this.requestFocus();
        JOptionPane.showMessageDialog(null,"Passwords do not match");
        }
    }//GEN-LAST:event_txtcnfpasswdFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClickTextOptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClickTextOptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClickTextOptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClickTextOptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClickTextOptionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnnwusr;
    private javax.swing.JButton btnredx;
    private javax.swing.JButton btnrst;
    private javax.swing.JButton btnsopass;
    private java.awt.Canvas cnv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPasswordField txtcnfpasswd;
    private javax.swing.JPasswordField txtpasswd;
    private javax.swing.JTextField txtuser;
    private javax.swing.JTextField txtusrname;
    // End of variables declaration//GEN-END:variables
}
